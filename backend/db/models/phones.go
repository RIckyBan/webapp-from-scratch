// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Phone is an object representing the database table.
type Phone struct {
	ID              string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Brand           string        `boil:"brand" json:"brand" toml:"brand" yaml:"brand"`
	Model           string        `boil:"model" json:"model" toml:"model" yaml:"model"`
	OperatingSystem string        `boil:"operating_system" json:"operating_system" toml:"operating_system" yaml:"operating_system"`
	StorageGB       int           `boil:"storage_gb" json:"storage_gb" toml:"storage_gb" yaml:"storage_gb"`
	RAMGB           int           `boil:"ram_gb" json:"ram_gb" toml:"ram_gb" yaml:"ram_gb"`
	Color           string        `boil:"color" json:"color" toml:"color" yaml:"color"`
	ScreenSizeInch  types.Decimal `boil:"screen_size_inch" json:"screen_size_inch" toml:"screen_size_inch" yaml:"screen_size_inch"`
	WeightG         types.Decimal `boil:"weight_g" json:"weight_g" toml:"weight_g" yaml:"weight_g"`
	Price           int           `boil:"price" json:"price" toml:"price" yaml:"price"`
	ReleaseDate     time.Time     `boil:"release_date" json:"release_date" toml:"release_date" yaml:"release_date"`
	Description     null.String   `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *phoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L phoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PhoneColumns = struct {
	ID              string
	Brand           string
	Model           string
	OperatingSystem string
	StorageGB       string
	RAMGB           string
	Color           string
	ScreenSizeInch  string
	WeightG         string
	Price           string
	ReleaseDate     string
	Description     string
}{
	ID:              "id",
	Brand:           "brand",
	Model:           "model",
	OperatingSystem: "operating_system",
	StorageGB:       "storage_gb",
	RAMGB:           "ram_gb",
	Color:           "color",
	ScreenSizeInch:  "screen_size_inch",
	WeightG:         "weight_g",
	Price:           "price",
	ReleaseDate:     "release_date",
	Description:     "description",
}

var PhoneTableColumns = struct {
	ID              string
	Brand           string
	Model           string
	OperatingSystem string
	StorageGB       string
	RAMGB           string
	Color           string
	ScreenSizeInch  string
	WeightG         string
	Price           string
	ReleaseDate     string
	Description     string
}{
	ID:              "phones.id",
	Brand:           "phones.brand",
	Model:           "phones.model",
	OperatingSystem: "phones.operating_system",
	StorageGB:       "phones.storage_gb",
	RAMGB:           "phones.ram_gb",
	Color:           "phones.color",
	ScreenSizeInch:  "phones.screen_size_inch",
	WeightG:         "phones.weight_g",
	Price:           "phones.price",
	ReleaseDate:     "phones.release_date",
	Description:     "phones.description",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PhoneWhere = struct {
	ID              whereHelperstring
	Brand           whereHelperstring
	Model           whereHelperstring
	OperatingSystem whereHelperstring
	StorageGB       whereHelperint
	RAMGB           whereHelperint
	Color           whereHelperstring
	ScreenSizeInch  whereHelpertypes_Decimal
	WeightG         whereHelpertypes_Decimal
	Price           whereHelperint
	ReleaseDate     whereHelpertime_Time
	Description     whereHelpernull_String
}{
	ID:              whereHelperstring{field: "`phones`.`id`"},
	Brand:           whereHelperstring{field: "`phones`.`brand`"},
	Model:           whereHelperstring{field: "`phones`.`model`"},
	OperatingSystem: whereHelperstring{field: "`phones`.`operating_system`"},
	StorageGB:       whereHelperint{field: "`phones`.`storage_gb`"},
	RAMGB:           whereHelperint{field: "`phones`.`ram_gb`"},
	Color:           whereHelperstring{field: "`phones`.`color`"},
	ScreenSizeInch:  whereHelpertypes_Decimal{field: "`phones`.`screen_size_inch`"},
	WeightG:         whereHelpertypes_Decimal{field: "`phones`.`weight_g`"},
	Price:           whereHelperint{field: "`phones`.`price`"},
	ReleaseDate:     whereHelpertime_Time{field: "`phones`.`release_date`"},
	Description:     whereHelpernull_String{field: "`phones`.`description`"},
}

// PhoneRels is where relationship names are stored.
var PhoneRels = struct {
	Carts  string
	Orders string
}{
	Carts:  "Carts",
	Orders: "Orders",
}

// phoneR is where relationships are stored.
type phoneR struct {
	Carts  CartSlice  `boil:"Carts" json:"Carts" toml:"Carts" yaml:"Carts"`
	Orders OrderSlice `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*phoneR) NewStruct() *phoneR {
	return &phoneR{}
}

func (r *phoneR) GetCarts() CartSlice {
	if r == nil {
		return nil
	}
	return r.Carts
}

func (r *phoneR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

// phoneL is where Load methods for each relationship are stored.
type phoneL struct{}

var (
	phoneAllColumns            = []string{"id", "brand", "model", "operating_system", "storage_gb", "ram_gb", "color", "screen_size_inch", "weight_g", "price", "release_date", "description"}
	phoneColumnsWithoutDefault = []string{"id", "brand", "model", "operating_system", "storage_gb", "ram_gb", "color", "screen_size_inch", "weight_g", "price", "release_date", "description"}
	phoneColumnsWithDefault    = []string{}
	phonePrimaryKeyColumns     = []string{"id"}
	phoneGeneratedColumns      = []string{}
)

type (
	// PhoneSlice is an alias for a slice of pointers to Phone.
	// This should almost always be used instead of []Phone.
	PhoneSlice []*Phone
	// PhoneHook is the signature for custom Phone hook methods
	PhoneHook func(context.Context, boil.ContextExecutor, *Phone) error

	phoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	phoneType                 = reflect.TypeOf(&Phone{})
	phoneMapping              = queries.MakeStructMapping(phoneType)
	phonePrimaryKeyMapping, _ = queries.BindMapping(phoneType, phoneMapping, phonePrimaryKeyColumns)
	phoneInsertCacheMut       sync.RWMutex
	phoneInsertCache          = make(map[string]insertCache)
	phoneUpdateCacheMut       sync.RWMutex
	phoneUpdateCache          = make(map[string]updateCache)
	phoneUpsertCacheMut       sync.RWMutex
	phoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var phoneAfterSelectHooks []PhoneHook

var phoneBeforeInsertHooks []PhoneHook
var phoneAfterInsertHooks []PhoneHook

var phoneBeforeUpdateHooks []PhoneHook
var phoneAfterUpdateHooks []PhoneHook

var phoneBeforeDeleteHooks []PhoneHook
var phoneAfterDeleteHooks []PhoneHook

var phoneBeforeUpsertHooks []PhoneHook
var phoneAfterUpsertHooks []PhoneHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Phone) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Phone) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Phone) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Phone) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Phone) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Phone) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Phone) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Phone) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Phone) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range phoneAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPhoneHook registers your hook function for all future operations.
func AddPhoneHook(hookPoint boil.HookPoint, phoneHook PhoneHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		phoneAfterSelectHooks = append(phoneAfterSelectHooks, phoneHook)
	case boil.BeforeInsertHook:
		phoneBeforeInsertHooks = append(phoneBeforeInsertHooks, phoneHook)
	case boil.AfterInsertHook:
		phoneAfterInsertHooks = append(phoneAfterInsertHooks, phoneHook)
	case boil.BeforeUpdateHook:
		phoneBeforeUpdateHooks = append(phoneBeforeUpdateHooks, phoneHook)
	case boil.AfterUpdateHook:
		phoneAfterUpdateHooks = append(phoneAfterUpdateHooks, phoneHook)
	case boil.BeforeDeleteHook:
		phoneBeforeDeleteHooks = append(phoneBeforeDeleteHooks, phoneHook)
	case boil.AfterDeleteHook:
		phoneAfterDeleteHooks = append(phoneAfterDeleteHooks, phoneHook)
	case boil.BeforeUpsertHook:
		phoneBeforeUpsertHooks = append(phoneBeforeUpsertHooks, phoneHook)
	case boil.AfterUpsertHook:
		phoneAfterUpsertHooks = append(phoneAfterUpsertHooks, phoneHook)
	}
}

// One returns a single phone record from the query.
func (q phoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Phone, error) {
	o := &Phone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for phones")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Phone records from the query.
func (q phoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (PhoneSlice, error) {
	var o []*Phone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Phone slice")
	}

	if len(phoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Phone records in the query.
func (q phoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count phones rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q phoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if phones exists")
	}

	return count > 0, nil
}

// Carts retrieves all the cart's Carts with an executor.
func (o *Phone) Carts(mods ...qm.QueryMod) cartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`carts`.`phone_id`=?", o.ID),
	)

	return Carts(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *Phone) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`orders`.`phone_id`=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadCarts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (phoneL) LoadCarts(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhone interface{}, mods queries.Applicator) error {
	var slice []*Phone
	var object *Phone

	if singular {
		var ok bool
		object, ok = maybePhone.(*Phone)
		if !ok {
			object = new(Phone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhone))
			}
		}
	} else {
		s, ok := maybePhone.(*[]*Phone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhone))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &phoneR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &phoneR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.phone_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load carts")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice carts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(cartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Carts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartR{}
			}
			foreign.R.Phone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PhoneID {
				local.R.Carts = append(local.R.Carts, foreign)
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.Phone = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (phoneL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybePhone interface{}, mods queries.Applicator) error {
	var slice []*Phone
	var object *Phone

	if singular {
		var ok bool
		object, ok = maybePhone.(*Phone)
		if !ok {
			object = new(Phone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePhone))
			}
		}
	} else {
		s, ok := maybePhone.(*[]*Phone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePhone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePhone))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &phoneR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &phoneR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.phone_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Phone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PhoneID {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Phone = local
				break
			}
		}
	}

	return nil
}

// AddCarts adds the given related objects to the existing relationships
// of the phone, optionally inserting them as new records.
// Appends related to o.R.Carts.
// Sets related.R.Phone appropriately.
func (o *Phone) AddCarts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhoneID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `carts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"phone_id"}),
				strmangle.WhereClause("`", "`", 0, cartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &phoneR{
			Carts: related,
		}
	} else {
		o.R.Carts = append(o.R.Carts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartR{
				Phone: o,
			}
		} else {
			rel.R.Phone = o
		}
	}
	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the phone, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.Phone appropriately.
func (o *Phone) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PhoneID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `orders` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"phone_id"}),
				strmangle.WhereClause("`", "`", 0, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PhoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &phoneR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Phone: o,
			}
		} else {
			rel.R.Phone = o
		}
	}
	return nil
}

// Phones retrieves all the records using an executor.
func Phones(mods ...qm.QueryMod) phoneQuery {
	mods = append(mods, qm.From("`phones`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`phones`.*"})
	}

	return phoneQuery{q}
}

// FindPhone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPhone(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Phone, error) {
	phoneObj := &Phone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `phones` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, phoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from phones")
	}

	if err = phoneObj.doAfterSelectHooks(ctx, exec); err != nil {
		return phoneObj, err
	}

	return phoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Phone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no phones provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(phoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	phoneInsertCacheMut.RLock()
	cache, cached := phoneInsertCache[key]
	phoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			phoneAllColumns,
			phoneColumnsWithDefault,
			phoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(phoneType, phoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(phoneType, phoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `phones` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `phones` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `phones` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, phonePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into phones")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for phones")
	}

CacheNoHooks:
	if !cached {
		phoneInsertCacheMut.Lock()
		phoneInsertCache[key] = cache
		phoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Phone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Phone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	phoneUpdateCacheMut.RLock()
	cache, cached := phoneUpdateCache[key]
	phoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			phoneAllColumns,
			phonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update phones, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `phones` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, phonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(phoneType, phoneMapping, append(wl, phonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update phones row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for phones")
	}

	if !cached {
		phoneUpdateCacheMut.Lock()
		phoneUpdateCache[key] = cache
		phoneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q phoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for phones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for phones")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PhoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `phones` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, phonePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in phone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all phone")
	}
	return rowsAff, nil
}

var mySQLPhoneUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Phone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no phones provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(phoneColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPhoneUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	phoneUpsertCacheMut.RLock()
	cache, cached := phoneUpsertCache[key]
	phoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			phoneAllColumns,
			phoneColumnsWithDefault,
			phoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			phoneAllColumns,
			phonePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert phones, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`phones`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `phones` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(phoneType, phoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(phoneType, phoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for phones")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(phoneType, phoneMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for phones")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for phones")
	}

CacheNoHooks:
	if !cached {
		phoneUpsertCacheMut.Lock()
		phoneUpsertCache[key] = cache
		phoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Phone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Phone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Phone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), phonePrimaryKeyMapping)
	sql := "DELETE FROM `phones` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from phones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for phones")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q phoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no phoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from phones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for phones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PhoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(phoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `phones` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, phonePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from phone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for phones")
	}

	if len(phoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Phone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPhone(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PhoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PhoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), phonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `phones`.* FROM `phones` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, phonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PhoneSlice")
	}

	*o = slice

	return nil
}

// PhoneExists checks if the Phone row exists.
func PhoneExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `phones` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if phones exists")
	}

	return exists, nil
}

// Exists checks if the Phone row exists.
func (o *Phone) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PhoneExists(ctx, exec, o.ID)
}
