// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPhones(t *testing.T) {
	t.Parallel()

	query := Phones()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPhonesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhonesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Phones().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhonesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PhoneSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPhonesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PhoneExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Phone exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PhoneExists to return true, but got false.")
	}
}

func testPhonesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	phoneFound, err := FindPhone(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if phoneFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPhonesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Phones().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPhonesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Phones().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPhonesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	phoneOne := &Phone{}
	phoneTwo := &Phone{}
	if err = randomize.Struct(seed, phoneOne, phoneDBTypes, false, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}
	if err = randomize.Struct(seed, phoneTwo, phoneDBTypes, false, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = phoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = phoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Phones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPhonesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	phoneOne := &Phone{}
	phoneTwo := &Phone{}
	if err = randomize.Struct(seed, phoneOne, phoneDBTypes, false, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}
	if err = randomize.Struct(seed, phoneTwo, phoneDBTypes, false, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = phoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = phoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func phoneBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func phoneAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Phone) error {
	*o = Phone{}
	return nil
}

func testPhonesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Phone{}
	o := &Phone{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, phoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Phone object: %s", err)
	}

	AddPhoneHook(boil.BeforeInsertHook, phoneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	phoneBeforeInsertHooks = []PhoneHook{}

	AddPhoneHook(boil.AfterInsertHook, phoneAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	phoneAfterInsertHooks = []PhoneHook{}

	AddPhoneHook(boil.AfterSelectHook, phoneAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	phoneAfterSelectHooks = []PhoneHook{}

	AddPhoneHook(boil.BeforeUpdateHook, phoneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	phoneBeforeUpdateHooks = []PhoneHook{}

	AddPhoneHook(boil.AfterUpdateHook, phoneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	phoneAfterUpdateHooks = []PhoneHook{}

	AddPhoneHook(boil.BeforeDeleteHook, phoneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	phoneBeforeDeleteHooks = []PhoneHook{}

	AddPhoneHook(boil.AfterDeleteHook, phoneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	phoneAfterDeleteHooks = []PhoneHook{}

	AddPhoneHook(boil.BeforeUpsertHook, phoneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	phoneBeforeUpsertHooks = []PhoneHook{}

	AddPhoneHook(boil.AfterUpsertHook, phoneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	phoneAfterUpsertHooks = []PhoneHook{}
}

func testPhonesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPhonesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(phoneColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPhoneToManyCarts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Phone
	var b, c Cart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PhoneID = a.ID
	c.PhoneID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Carts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PhoneID == b.PhoneID {
			bFound = true
		}
		if v.PhoneID == c.PhoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PhoneSlice{&a}
	if err = a.L.LoadCarts(ctx, tx, false, (*[]*Phone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Carts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Carts = nil
	if err = a.L.LoadCarts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Carts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPhoneToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Phone
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PhoneID = a.ID
	c.PhoneID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PhoneID == b.PhoneID {
			bFound = true
		}
		if v.PhoneID == c.PhoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PhoneSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*Phone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPhoneToManyAddOpCarts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Phone
	var b, c, d, e Cart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneDBTypes, false, strmangle.SetComplement(phonePrimaryKeyColumns, phoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Cart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Cart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCarts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PhoneID {
			t.Error("foreign key was wrong value", a.ID, first.PhoneID)
		}
		if a.ID != second.PhoneID {
			t.Error("foreign key was wrong value", a.ID, second.PhoneID)
		}

		if first.R.Phone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Phone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Carts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Carts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Carts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPhoneToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Phone
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, phoneDBTypes, false, strmangle.SetComplement(phonePrimaryKeyColumns, phoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PhoneID {
			t.Error("foreign key was wrong value", a.ID, first.PhoneID)
		}
		if a.ID != second.PhoneID {
			t.Error("foreign key was wrong value", a.ID, second.PhoneID)
		}

		if first.R.Phone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Phone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPhonesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPhonesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PhoneSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPhonesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Phones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	phoneDBTypes = map[string]string{`ID`: `varchar`, `Brand`: `varchar`, `Model`: `varchar`, `OperatingSystem`: `varchar`, `StorageGB`: `int`, `RAMGB`: `int`, `Color`: `varchar`, `ScreenSizeInch`: `decimal`, `WeightG`: `decimal`, `Price`: `int`, `ReleaseDate`: `date`, `Description`: `text`}
	_            = bytes.MinRead
)

func testPhonesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(phonePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(phoneAllColumns) == len(phonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, phoneDBTypes, true, phonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPhonesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(phoneAllColumns) == len(phonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Phone{}
	if err = randomize.Struct(seed, o, phoneDBTypes, true, phoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, phoneDBTypes, true, phonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(phoneAllColumns, phonePrimaryKeyColumns) {
		fields = phoneAllColumns
	} else {
		fields = strmangle.SetComplement(
			phoneAllColumns,
			phonePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PhoneSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPhonesUpsert(t *testing.T) {
	t.Parallel()

	if len(phoneAllColumns) == len(phonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPhoneUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Phone{}
	if err = randomize.Struct(seed, &o, phoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Phone: %s", err)
	}

	count, err := Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, phoneDBTypes, false, phonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Phone struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Phone: %s", err)
	}

	count, err = Phones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
